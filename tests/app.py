# Used for integration test
from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.responses import FileResponse
import numpy as np
import os

# Mock function for image_to_vector
def mock_image_to_vector(image_path):
    # Return a 1024-dimensional numpy vector
    return np.random.rand(1024)

# Mock function for query
def mock_query(user_query, image_vector):
    # Simulate chunked text based on user_query and image_vector
    combined_text_chunks = "Mock chunked text generated by RAG."
    return {"prompt": f"{user_query} {combined_text_chunks}"}

app = FastAPI()

# Input model for the /vector_generator endpoint
class VectorInput(BaseModel):
    image_path: str

@app.post("/vector_generator")
async def vector_generator(input_data: VectorInput):
    vector = mock_image_to_vector(input_data.image_path)  # Replace with real function in production
    vector_file_path = "vector.npy"
    np.save(vector_file_path, vector)
    return FileResponse(vector_file_path, media_type="application/octet-stream")


# Input model for the /rag endpoint
class RAGInput(BaseModel):
    user_query: str
    image_vector: str  # Path to the vector file

@app.post("/rag")
async def rag_query(input_data: RAGInput):
    image_vector_np = np.load(input_data.image_vector)
    output = mock_query(input_data.user_query, image_vector_np)  # Replace with real function in production
    return output
